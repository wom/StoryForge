[project]
name = "StoryForge"
version = "0.0.3"
description = "A TUI app that generates short stories and AI images from prompts using a language model."
authors = [
    { name = "wom" }
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["ai", "stories", "children", "cli", "gemini", "image-generation", "text-generation", "tui", "storytelling", "terminal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing :: General",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Games/Entertainment",
    "Topic :: Artistic Software",
    "Topic :: Education",
    "Typing :: Typed",
]
dependencies = [
    "google-genai>=1.23.0",
    "anthropic>=0.28.0",
    "openai>=1.12.0",
    "requests>=2.31.0",
    "pillow>=11.2.1",
    "textual[syntax]>=0.54.1",
    "textual-dev>=0.00.1",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "platformdirs>=4.2.0"
]

[project.urls]
"Homepage" = "https://github.com/wom/StoryForge"
"Repository" = "https://github.com/wom/StoryForge"
"Bug Tracker" = "https://github.com/wom/StoryForge/issues"
"Documentation" = "https://github.com/wom/StoryForge#readme"

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "ruff>=0.12.1",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "pip>=25.1.1"
]

[project.scripts]
storyforge = "storyforge.StoryForge:app"
sf = "storyforge.StoryForge:app"

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["storyforge*"]
exclude = ["data*", "tests*"]

[tool.ruff]
target-version = "py312"
line-length = 119

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
# Start with basic checks, can be made stricter later
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ignore third-party libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "google.*",
    "openai.*",
    "requests.*",
    "textual.*",
    "PIL.*",
]
ignore_missing_imports = true

# Allow gradual adoption for tests
[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_errors = true
